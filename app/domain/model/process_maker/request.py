import datetime
from typing import Optional
from sqlalchemy import Column, String, Integer, DateTime, ForeignKey
from sqlalchemy.orm import relationship

from app.domain.model import Base
from app.domain.model._serializable import Serializable
from app.domain.utils import validation


class Request(Base, Serializable):
    __tablename__ = 'request'
    id: int = Column(Integer, primary_key=True)
    title: str = Column(String(500))
    user_id: int = Column(Integer, ForeignKey('users.id'))
    process_id: int = Column(Integer, ForeignKey('process.id'))
    current_state_id: int = Column(Integer, ForeignKey('state.id'))

    process = relationship("Process", back_populates="request")
    current_state = relationship("State", foreign_keys=[current_state_id])
    user = relationship("User", back_populates="request")
    request_note = relationship("RequestNote", back_populates="request")
    request_data = relationship("RequestData", back_populates="request")
    request_stakeholder = relationship("RequestStakeholder", back_populates="request")


class RequestNote(Base, Serializable):
    """RequestNote can be use as a note/comment or notify by system

    As note by user: user_id=1, I change the date in deal
    As note by system: user_id=1, just update a new request data
    """
    __tablename__ = 'request_note'
    id: int = Column(Integer, primary_key=True)
    user_id: int = Column(Integer)  # will be 0 if generated by system
    request_id: int = Column(Integer, ForeignKey('request.id'))
    note_type: str = Column(String(64))  # default is user_note, can be system_note
    status: str = Column(String(64))  # default is active
    note: str = Column(String(4000))
    request = relationship("Request", back_populates="request_note")


class RequestData(Base, Serializable):
    __tablename__ = 'request_data'
    id: int = Column(Integer, primary_key=True)
    request_id: int = Column(Integer, ForeignKey('request.id'))
    data_type: str = Column(String(64))  # can be json or the model name of the product
    status: str = Column(String(64))  # default is active
    name: str = Column(String(128))  # can be json or the deal id of the product
    value: str = Column(String(4000))  # json data, can be the detail of the deal
    request = relationship("Request", back_populates="request_data")


class RequestStakeholder(Base, Serializable):
    """user when a group or a user is cc in a request"""
    __tablename__ = 'request_stakeholder'
    id: int = Column(Integer, primary_key=True)
    request_id: int = Column(Integer, ForeignKey('request.id'))
    stakeholder_id: int = Column(Integer)  # will be user_id or group_id
    stakeholder_type: str = Column(String(64))  # user or group
    request = relationship("Request", back_populates="request_stakeholder")


class RequestAction(Base, Serializable):
    """RequestAction is the real action of user which can route from state to state"""
    __tablename__ = 'request_action'
    id: int = Column(Integer, primary_key=True)
    request_id: int = Column(Integer, ForeignKey('request.id'))
    action_id: int = Column(Integer, ForeignKey('action.id'))
    user_id: int = Column(Integer, ForeignKey('users.id'))  # who made this action
    route_id: int = Column(Integer, ForeignKey('route.id'))
    status: str = Column(String(64))  # can be active|done|revert

